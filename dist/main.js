(()=>{"use strict";const e={events:{},subscribe(e,t){console.log(`PUBSUB: someone just subscribed to know about ${e}`),this.events[e]=this.events[e]||[],this.events[e].push(t)},unsubscribe(e,t){console.log(`PUBSUB: someone just UNsubscribed from ${e}`),this.events[e]&&(this.events[e]=this.events[e].filter((e=>e!==t)))},publish(e,t){console.log(`PUBSUB: Making an broadcast about ${e} with ${t}`),this.events[e]&&this.events[e].forEach((e=>{e(t)}))}},t={getFormData(e){const t=new FormData(e.target);return Object.fromEntries(t)}},s=(function(){let s=document.getElementById("h1");document.getElementById("form").addEventListener("submit",(s=>{s.preventDefault();let a=t.getFormData(s);e.publish("citySearch",a)})),e.subscribe("cityDataReturned",void(s.innerText=undefined))}(),"82dbf781a95c7b01a16d7fdaaf1b552c");e.subscribe("citySearch",(async t=>{let a=t.cityName,n=await function(){let e=s,t=async(e,t)=>{try{console.log("API Fetcher has fired");const s=await fetch(`${e}${t}`);return await s.json()}catch(e){return console.log(e),"ERROR"}};return{cityWeather:async s=>{const a=await(async s=>(console.log("GEO Fetcher has fired"),t(`http://api.openweathermap.org/geo/1.0/direct?q=${s}&appid=`,e)))(s),n={lat:a[0].lat,lon:a[0].lon},o=await(async s=>(console.log("Weather Fetcher has fired"),t(`https://api.openweathermap.org/data/2.5/weather?lat=${s.lat}&&lon=${s.lon}&appid=`,e)))(n);return console.log("data is:"),console.log(o),o}}}().cityWeather(a);e.publish("cityDataReturned",n)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQU8sTUFBTUEsRUFBUyxDQUNwQkMsT0FBUSxDQUFDLEVBQ1RDLFVBQVVDLEVBQVFDLEdBQ2hCQyxRQUFRQyxJQUFJLGlEQUFpREgsS0FFN0RJLEtBQUtOLE9BQU9FLEdBQVVJLEtBQUtOLE9BQU9FLElBQVcsR0FDN0NJLEtBQUtOLE9BQU9FLEdBQVFLLEtBQUtKLEVBQzNCLEVBQ0FLLFlBQVlOLEVBQVFDLEdBQ2xCQyxRQUFRQyxJQUFJLDBDQUEwQ0gsS0FFbERJLEtBQUtOLE9BQU9FLEtBQ2RJLEtBQUtOLE9BQU9FLEdBQVVJLEtBQUtOLE9BQU9FLEdBQVFPLFFBQVFDLEdBQU1BLElBQU1QLElBRWxFLEVBQ0FRLFFBQVFULEVBQVFVLEdBQ2RSLFFBQVFDLElBQUkscUNBQXFDSCxVQUFlVSxLQUU1RE4sS0FBS04sT0FBT0UsSUFDZEksS0FBS04sT0FBT0UsR0FBUVcsU0FBU0gsSUFDM0JBLEVBQUVFLEVBQUssR0FHYixHQ3BCSUUsRUFBTyxDQUNUQyxZQUFZQyxHQUNSLE1BQU1DLEVBQVcsSUFBSUMsU0FBU0YsRUFBTUcsUUFFcEMsT0FEa0JDLE9BQU9DLFlBQVlKLEVBRXpDLEdDUlNLLEdEV0QsV0FFUixJQUFJQyxFQUFLQyxTQUFTQyxlQUFlLE1BQ3RCRCxTQUFTQyxlQUFlLFFBRzlCQyxpQkFBaUIsVUFBV0MsSUFDN0JBLEVBQUVDLGlCQUNGLElBQUloQixFQUFPRSxFQUFLQyxZQUFZWSxHQUM1QjVCLEVBQU9ZLFFBQVEsYUFBY0MsRUFBSSxJQU9yQ2IsRUFBT0UsVUFBVSx3QkFIYnNCLEVBQUdNLFVBRGFqQixXQU92QixDQW5CVyxHQ1ZMLG9DQ2VIYixFQUFPRSxVQUFVLGNBTkE2QixNQUFPQyxJQUNwQixJQUFJQyxFQUFPRCxFQUFNRSxTQUNickIsUUNWTCxXQUVMLElBQUlzQixFQUFTWixFQUVUYSxFQUFhTCxNQUFPTSxFQUFNQyxLQUM1QixJQUNFakMsUUFBUUMsSUFBSSx5QkFDWixNQUFNaUMsUUFBZ0JDLE1BQU0sR0FBR0gsSUFBT0MsS0FFdEMsYUFEbUJDLEVBQVFFLE1BSzdCLENBSEUsTUFBT0MsR0FFUCxPQURBckMsUUFBUUMsSUFBSW9DLEdBQ0wsT0FDVCxHQXlCRixNQUFPLENBQUVDLFlBVlNaLE1BQU9FLElBQ3ZCLE1BQU1XLE9BYlNiLE9BQU9FLElBQ3RCNUIsUUFBUUMsSUFBSSx5QkFFTDhCLEVBRE0sa0RBQWtESCxXQUNyQ0UsSUFVSFUsQ0FBV1osR0FDNUJhLEVBQVksQ0FBRUMsSUFBS0gsRUFBUyxHQUFHRyxJQUFLQyxJQUFLSixFQUFTLEdBQUdJLEtBRXJEQyxPQVZhbEIsT0FBT21CLElBQzFCN0MsUUFBUUMsSUFBSSw2QkFFTDhCLEVBRFUsdURBQXVEYyxFQUFNSCxZQUFZRyxFQUFNRixhQUNsRWIsSUFPSmdCLENBQWVMLEdBR3pDLE9BRkF6QyxRQUFRQyxJQUFJLFlBQ1pELFFBQVFDLElBQUkyQyxHQUNMQSxDQUFXLEVBSXRCLENEN0J5QkcsR0FBZ0JULFlBQVlWLEdBQzdDakMsRUFBT1ksUUFBUSxtQkFBb0JDLEVBQUksRyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYXRoZXJhcHAvLi9zcmMvanMvcHVic3ViLmpzIiwid2VicGFjazovL3dlYXRoZXJhcHAvLi9zcmMvanMvZG9tLmpzIiwid2VicGFjazovL3dlYXRoZXJhcHAvLi9zcmMvanMvZGIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlcmFwcC8uL3NyYy9qcy9hcHAuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlcmFwcC8uL3NyYy9qcy9hcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHB1YnN1YiA9IHtcbiAgZXZlbnRzOiB7fSxcbiAgc3Vic2NyaWJlKGV2TmFtZSwgZm4pIHtcbiAgICBjb25zb2xlLmxvZyhgUFVCU1VCOiBzb21lb25lIGp1c3Qgc3Vic2NyaWJlZCB0byBrbm93IGFib3V0ICR7ZXZOYW1lfWApO1xuICAgIC8vIGFkZCBhbiBldmVudCB3aXRoIGEgbmFtZSBhcyBuZXcgb3IgdG8gZXhpc3RpbmcgbGlzdFxuICAgIHRoaXMuZXZlbnRzW2V2TmFtZV0gPSB0aGlzLmV2ZW50c1tldk5hbWVdIHx8IFtdO1xuICAgIHRoaXMuZXZlbnRzW2V2TmFtZV0ucHVzaChmbik7XG4gIH0sXG4gIHVuc3Vic2NyaWJlKGV2TmFtZSwgZm4pIHtcbiAgICBjb25zb2xlLmxvZyhgUFVCU1VCOiBzb21lb25lIGp1c3QgVU5zdWJzY3JpYmVkIGZyb20gJHtldk5hbWV9YCk7XG4gICAgLy8gcmVtb3ZlIGFuIGV2ZW50IGZ1bmN0aW9uIGJ5IG5hbWVcbiAgICBpZiAodGhpcy5ldmVudHNbZXZOYW1lXSkge1xuICAgICAgdGhpcy5ldmVudHNbZXZOYW1lXSA9IHRoaXMuZXZlbnRzW2V2TmFtZV0uZmlsdGVyKChmKSA9PiBmICE9PSBmbik7XG4gICAgfVxuICB9LFxuICBwdWJsaXNoKGV2TmFtZSwgZGF0YSkge1xuICAgIGNvbnNvbGUubG9nKGBQVUJTVUI6IE1ha2luZyBhbiBicm9hZGNhc3QgYWJvdXQgJHtldk5hbWV9IHdpdGggJHtkYXRhfWApO1xuICAgIC8vIGVtaXR8cHVibGlzaHxhbm5vdW5jZSB0aGUgZXZlbnQgdG8gYW55b25lIHdobyBpcyBzdWJzY3JpYmVkXG4gICAgaWYgKHRoaXMuZXZlbnRzW2V2TmFtZV0pIHtcbiAgICAgIHRoaXMuZXZlbnRzW2V2TmFtZV0uZm9yRWFjaCgoZikgPT4ge1xuICAgICAgICBmKGRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcbiIsImltcG9ydCB7IHB1YnN1YiB9IGZyb20gXCIuL3B1YnN1Yi5qc1wiO1xuZXhwb3J0IHsgZG9tIH1cblxuY29uc3QgbGlicyA9IHtcbiAgICBnZXRGb3JtRGF0YShldmVudCkge1xuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShldmVudC50YXJnZXQpO1xuICAgICAgICBjb25zdCBmb3JtUHJvcHMgPSBPYmplY3QuZnJvbUVudHJpZXMoZm9ybURhdGEpO1xuICAgICAgICByZXR1cm4gZm9ybVByb3BzO1xuICAgIH1cbn1cblxuY29uc3QgZG9tID0gKGZ1bmN0aW9uICgpIHtcblxuICAgIGxldCBoMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoMScpXG4gICAgbGV0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9ybScpXG5cblxuICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGxldCBkYXRhID0gbGlicy5nZXRGb3JtRGF0YShlKVxuICAgICAgICBwdWJzdWIucHVibGlzaCgnY2l0eVNlYXJjaCcsIGRhdGEpXG4gICAgfSlcblxuICAgIGxldCBjaGFuZ2VIMVRleHQgPSAoZGF0YSkgPT4ge1xuICAgICAgICBoMS5pbm5lclRleHQgPSBkYXRhXG4gICAgfVxuXG4gICAgcHVic3ViLnN1YnNjcmliZSgnY2l0eURhdGFSZXR1cm5lZCcsIGNoYW5nZUgxVGV4dCgpKVxuXG5cbn0pKClcbiIsImV4cG9ydCBjb25zdCBkYiA9IHtcbiAga2V5OiBcIjgyZGJmNzgxYTk1YzdiMDFhMTZkN2ZkYWFmMWI1NTJjXCIsXG59O1xuIiwiaW1wb3J0IHsgYXBpQ29udHJvbGxlciB9IGZyb20gXCIuL2FwaVwiO1xuaW1wb3J0IHsgcHVic3ViIH0gZnJvbSBcIi4vcHVic3ViXCI7XG5cbmV4cG9ydCB7IGFwcCB9XG4vLyBhcGlDb250cm9sbGVyKClcbi8vICAgICAuY2l0eVdlYXRoZXIoXCJMb25kb25cIilcbi8vICAgICAudGhlbigoZGF0YSkgPT4gY29uc29sZS5sb2coZGF0YSkpO1xuXG5jb25zdCBhcHAgPSAoZnVuY3Rpb24gKCkge1xuXG4gICAgY29uc3QgcXVlcnlBcGkgPSBhc3luYyAocXVlcnkpID0+IHtcbiAgICAgICAgbGV0IGNpdHkgPSBxdWVyeS5jaXR5TmFtZVxuICAgICAgICBsZXQgZGF0YSA9IGF3YWl0IGFwaUNvbnRyb2xsZXIoKS5jaXR5V2VhdGhlcihjaXR5KVxuICAgICAgICBwdWJzdWIucHVibGlzaCgnY2l0eURhdGFSZXR1cm5lZCcsIGRhdGEpXG4gICAgfVxuXG4gICAgcHVic3ViLnN1YnNjcmliZSgnY2l0eVNlYXJjaCcsIHF1ZXJ5QXBpKVxuXG5cbn0pKCkiLCJpbXBvcnQgeyBkYiB9IGZyb20gXCIuL2RiXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcGlDb250cm9sbGVyKCkge1xuICAvL0xpbmtzIGFuZCBrZXlzXG4gIGxldCBhcGlLZXkgPSBkYi5rZXk7XG5cbiAgbGV0IGFwaUZldGNoZXIgPSBhc3luYyAobGluaywga2V5KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiQVBJIEZldGNoZXIgaGFzIGZpcmVkXCIpO1xuICAgICAgY29uc3QgcHJvbWlzZSA9IGF3YWl0IGZldGNoKGAke2xpbmt9JHtrZXl9YCk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcHJvbWlzZS5qc29uKCk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgcmV0dXJuIFwiRVJST1JcIjtcbiAgICB9XG4gIH07XG5cbiAgbGV0IGdlb0ZldGNoZXIgPSBhc3luYyAoY2l0eSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiR0VPIEZldGNoZXIgaGFzIGZpcmVkXCIpO1xuICAgIGxldCBnZW9BcGkgPSBgaHR0cDovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZ2VvLzEuMC9kaXJlY3Q/cT0ke2NpdHl9JmFwcGlkPWA7XG4gICAgcmV0dXJuIGFwaUZldGNoZXIoZ2VvQXBpLCBhcGlLZXkpO1xuICB9O1xuXG4gIGxldCB3ZWF0aGVyRmV0Y2hlciA9IGFzeW5jIChjb3JkcykgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiV2VhdGhlciBGZXRjaGVyIGhhcyBmaXJlZFwiKTtcbiAgICBsZXQgd2VhdGhlckFwaSA9IGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9sYXQ9JHtjb3Jkcy5sYXR9JiZsb249JHtjb3Jkcy5sb259JmFwcGlkPWA7XG4gICAgcmV0dXJuIGFwaUZldGNoZXIod2VhdGhlckFwaSwgYXBpS2V5KTtcbiAgfTtcblxuICBsZXQgY2l0eVdlYXRoZXIgPSBhc3luYyAoY2l0eSkgPT4ge1xuICAgIGNvbnN0IGNpdHlEYXRhID0gYXdhaXQgZ2VvRmV0Y2hlcihjaXR5KTtcbiAgICBjb25zdCBjaXR5Q29yZHMgPSB7IGxhdDogY2l0eURhdGFbMF0ubGF0LCBsb246IGNpdHlEYXRhWzBdLmxvbiB9O1xuXG4gICAgY29uc3Qgd2VhdGhlckRhdGEgPSBhd2FpdCB3ZWF0aGVyRmV0Y2hlcihjaXR5Q29yZHMpO1xuICAgIGNvbnNvbGUubG9nKFwiZGF0YSBpczpcIik7XG4gICAgY29uc29sZS5sb2cod2VhdGhlckRhdGEpO1xuICAgIHJldHVybiB3ZWF0aGVyRGF0YTtcbiAgfTtcblxuICByZXR1cm4geyBjaXR5V2VhdGhlciB9O1xufVxuIl0sIm5hbWVzIjpbInB1YnN1YiIsImV2ZW50cyIsInN1YnNjcmliZSIsImV2TmFtZSIsImZuIiwiY29uc29sZSIsImxvZyIsInRoaXMiLCJwdXNoIiwidW5zdWJzY3JpYmUiLCJmaWx0ZXIiLCJmIiwicHVibGlzaCIsImRhdGEiLCJmb3JFYWNoIiwibGlicyIsImdldEZvcm1EYXRhIiwiZXZlbnQiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwidGFyZ2V0IiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJkYiIsImgxIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwicHJldmVudERlZmF1bHQiLCJpbm5lclRleHQiLCJhc3luYyIsInF1ZXJ5IiwiY2l0eSIsImNpdHlOYW1lIiwiYXBpS2V5IiwiYXBpRmV0Y2hlciIsImxpbmsiLCJrZXkiLCJwcm9taXNlIiwiZmV0Y2giLCJqc29uIiwiZXJyb3IiLCJjaXR5V2VhdGhlciIsImNpdHlEYXRhIiwiZ2VvRmV0Y2hlciIsImNpdHlDb3JkcyIsImxhdCIsImxvbiIsIndlYXRoZXJEYXRhIiwiY29yZHMiLCJ3ZWF0aGVyRmV0Y2hlciIsImFwaUNvbnRyb2xsZXIiXSwic291cmNlUm9vdCI6IiJ9